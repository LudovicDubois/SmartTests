<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Title>SmartTests</Title>
    <TargetFramework>netstandard1.0</TargetFramework>
    <PackageId>SmartTests</PackageId>
    <Version>1.11.0</Version>
    <AssemblyVersion>1.11.0.0</AssemblyVersion>
    <FileVersion>1.11.0.0</FileVersion>
    <PackageReleaseNotes>A brand new [example project](https://github.com/LudovicDubois/SmartTests/tree/master/Examples) with lots of explanations. Learn how to maximize Smart Tests usage.

Many enhancements:

- [`Throw`](Assertions/throw.md) Smart Assertion exist now. This enables you to ensure the expected exception is thrown and following Smart Assertions are done.
- When an exception is thrown somewhere, we try to run all the `AfterAct` methods for which the `BeforeAct` method was called. However, the first exception is reported.
- [`NotChangedExcept()`](Assertions/notchanged.md#NotChangedExceptAct()) Smart Assertion method is renamed `NotChangedExceptAct` to better reflect what is excepted.
- [`Optional`](Criteria/Optional.md) criteria added, with two values: `Present` and `Absent`.
- Act Result is now accessible from `Act&lt;T&gt;.Result` property. Making it accessible from within the Smart Assertion implementations.

And some bug fixes:

- `NotChangedAssertion` do not try to save/verify indexers.
- No need to specify a Property Name when testing `NotRaised_PropertyChanged`.
- Random generators for floating point numbers have better values, but is no more well distributed.</PackageReleaseNotes>
    <Authors>Ludovic Dubois</Authors>
    <summary>SmartTests enables you to write Smarter unit tests, whether you use NUnit, Xunit or MSTests.</summary>
    <description>SmartTests enables you to write Smarter unit tests, wether you use NUnit, Xunit or MSTests.

It is best to install SmartTests.Analyzer and SmartTests.Extension so that missing tests will be displayed.

They are Smart in the sense that:
    1. The Act line of your test is instantly identifiable.
    2. You express your Act logical intent and the optional Analyzer will display all missing tests.
    3. You can use smarter assertions than the ones provided by usual Testing Frameworks as Smart Tests knows what is your Act and when it is run.
        a. You ensure that a PropertyChanged event is raised with only one line of code.
        b. You ensure that any event is raised with only one line of code.
        c. You ensure that an object didn't changed at all with only one line of code.
        d. You ensure that your property set is effective by checking its value after is not equal to its value before with only one line of code.
        e. You show each effect of your Act code relatively to its previous value with only one line of code.</description>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <copyright>Copyright (c) Pretty Objects Computers inc.</copyright>
    <PackageTags>SmartTests test testing tdd framework assert NUnit MSTests Xunit</PackageTags>
    <PackageProjectUrl>https://github.com/LudovicDubois/SmartTests</PackageProjectUrl>
    <PackageLicenseUrl></PackageLicenseUrl>
    <PackageIcon>SmartTests.png</PackageIcon>
    <RepositoryUrl>https://github.com/LudovicDubois/SmartTests</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <NeutralLanguage></NeutralLanguage>
    <ApplicationIcon>SmartTests-perspective.ico</ApplicationIcon>
    <Company>Pretty Objects Computers inc.</Company>
    <PackageLicenseExpression>MS-PL</PackageLicenseExpression>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\netstandard1.0\SmartTests.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netstandard1.0\SmartTests.xml</DocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <Compile Update="Resource.Designer.cs">
      <DependentUpon>Resource.resx</DependentUpon>
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resource.resx">
      <LastGenOutput>Resource.Designer.cs</LastGenOutput>
      <Generator>ResXFileCodeGenerator</Generator>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Include="images\SmartTests.png" Pack="true" PackagePath=""/>
  </ItemGroup>
</Project>
