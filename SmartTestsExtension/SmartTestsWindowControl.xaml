<UserControl x:Class="SmartTestsExtension.SmartTestsWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:smartTestsExtension="clr-namespace:SmartTestsExtension"
             xmlns:results="clr-namespace:SmartTestsExtension.Results"
             xmlns:helpers="clr-namespace:SmartTestsExtension.Helpers"
             Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"
             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
             Loaded="SmartTestsWindowControl_OnLoaded" Unloaded="SmartTestsWindowControl_OnUnloaded">
    <UserControl.Resources>
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
        </Style>
        <Style TargetType="TreeViewItem">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
        </Style>
        <Style TargetType="GridViewColumnHeader">
            <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="4*"/>
        </Grid.ColumnDefinitions>

        <DockPanel Grid.Column="0">
            <TreeView Name="Tested" Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"
                      ItemsSource="{Binding Source={x:Static smartTestsExtension:AnalyzerResults.Instance}, Path=TestedProjects}">
                <TreeView.Resources>
                    <Style x:Key="ForcedBackground" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}, Path=IsSelected}" Value="True"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}, Path=IsSelectionActive}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowButtonDownKey}}"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                    <HierarchicalDataTemplate DataType="{x:Type results:ProjectTests}" ItemsSource="{Binding TestsResult.Names}">
                        <TextBlock Text="{Binding ProjectName}" ToolTip="{Binding ProjectFullName}"
                                   Style="{StaticResource ForcedBackground}"/>
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type results:NameResult}" ItemsSource="{Binding SubNames}">
                        <TextBlock Text="{Binding Name}"
                                   Style="{StaticResource ForcedBackground}"/>
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type results:MemberResult}">
                        <TextBlock Text="{Binding Name}"
                                   Style="{StaticResource ForcedBackground}"/>
                    </DataTemplate>
                </TreeView.Resources>
            </TreeView>
        </DockPanel>
        <GridSplitter Grid.Column="1" Width="4" Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"
                      ResizeBehavior="PreviousAndNext" VerticalAlignment="Stretch"/>
        <DataGrid Name="ResultsGrid" Grid.Column="2" Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}" GridLinesVisibility="None"
                  IsReadOnly="True"
                  ItemsSource="{Binding ElementName=Tested, Path=SelectedItem.Items}" AutoGenerateColumns="True" AutoGeneratingColumn="DataGrid_OnAutoGeneratingColumn">
            <DataGrid.Resources>
                <Style TargetType="DataGridRowHeader" BasedOn="{StaticResource {x:Type DataGridRowHeader}}">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                </Style>
                <Style TargetType="DataGridColumnHeader" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTabGradientKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTabTextKey}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTabTextKey}}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Padding" Value="3 0"/>
                </Style>
                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsMissing}" Value="True">
                            <Setter Property="Background" Value="Red"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding HasError}" Value="True">
                            <Setter Property="FontStyle" Value="Italic"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>
            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowButtonDownKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                <Border Background="{TemplateBinding Background}">
                                    <ContentPresenter VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Test">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <Hyperlink Click="Hyperlink_OnClick">
                                    <Run Text="{Binding Test}"/>
                                </Hyperlink>
                            </TextBlock>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>